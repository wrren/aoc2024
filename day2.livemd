# Day 2

```elixir
Mix.install([:kino])
```

## Read File

```elixir
file_value = Kino.Input.file("Please Select Input File")
```

```elixir
file_input = Kino.Input.read(file_value)
file_path = Kino.Input.file_path(file_input.file_ref)
contents = File.read!(file_path)
```

```elixir
reports =
  contents
  |> String.split("\n")
  |> Enum.map(fn line -> String.split(line, " ") end)
  |> Enum.map(fn numbers ->
    numbers
    |> Enum.reject(fn n -> String.length(n) == 0 end)
    |> Enum.map(&String.to_integer/1)
  end)
  |> Enum.reject(&Enum.empty?/1)
```

```elixir
report_evaluator = fn numbers ->
  numbers
  |> Enum.reduce_while(%{result: true, last: nil, dir: nil}, fn
    n, %{last: nil} = result ->
      {:cont, %{result | last: n}}

    n, %{last: m} when m > n and m - n > 3 ->
      {:halt, %{result: false}}

    n, %{last: m} when n > m and n - m > 3 ->
      {:halt, %{result: false}}

    n, %{last: n} ->
      {:halt, %{result: false}}

    n, %{last: m, dir: nil} = result when n > m ->
      {:cont, %{result | dir: :asc, last: n}}

    n, %{last: m, dir: nil} = result when n < m ->
      {:cont, %{result | dir: :desc, last: n}}

    n, %{last: m, dir: :asc} when n < m ->
      {:halt, %{result: false}}

    n, %{last: m, dir: :desc} when n > m ->
      {:halt, %{result: false}}

    n, result ->
      {:cont, %{result | last: n}}
  end)
  |> Map.get(:result)
end
```

```elixir
defmodule ProblemDampener do
  def run(numbers, evaluator) when is_function(evaluator, 1) do
    case evaluator.(numbers) do
      true  -> true
      false -> run(numbers, evaluator, 0, length(numbers))
    end
  end
  def run(_numbers, _evaluator, length, length),
      do: false
  def run(numbers, evaluator, index, length) do
    case evaluator.(List.delete_at(numbers, index)) do
      true -> true
      false -> run(numbers, evaluator, index + 1, length)
    end
  end
end
```

## Part 1

```elixir
reports
|> Enum.filter(fn numbers -> report_evaluator.(numbers) end)
|> length()
```

## Part 2

```elixir
reports
|> Enum.filter(fn numbers -> ProblemDampener.run(numbers, report_evaluator) end)
|> length()
```
